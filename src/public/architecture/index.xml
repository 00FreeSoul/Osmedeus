<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Osmedeus Documentation</title>
    <link>https://j3ssie.github.io/Osmedeus/architecture/</link>
    <description>Recent content in Architecture on Osmedeus Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Aug 2019 21:13:44 +0700</lastBuildDate>
    
	<atom:link href="https://j3ssie.github.io/Osmedeus/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Structure</title>
      <link>https://j3ssie.github.io/Osmedeus/architecture/structure/</link>
      <pubDate>Mon, 09 Sep 2019 00:25:58 +0700</pubDate>
      
      <guid>https://j3ssie.github.io/Osmedeus/architecture/structure/</guid>
      <description>Osmedeus Structure . ├── lib # contain lib to for Server and client │ ├── alias │ ├── client │ ├── core │ ├── mode │ ├── noti │ ├── reporter │ ├── sender # API call from client to REST API server │ └── workflow # predefine command here ├── modules # Logic for each module ├── scripts └── server # Django API Server ├── api ├── rest └── ui  Result Structure By default your output will be store in ~/.</description>
    </item>
    
    <item>
      <title>Understand a Module</title>
      <link>https://j3ssie.github.io/Osmedeus/architecture/modules/understand-a-module/</link>
      <pubDate>Mon, 09 Sep 2019 13:33:20 +0700</pubDate>
      
      <guid>https://j3ssie.github.io/Osmedeus/architecture/modules/understand-a-module/</guid>
      <description>Skeleton module Skeleton module define a main logic for each module. All other modules should inheritance from this.
class Skeleton(object): # prepare and parsing input for current module def initial(self): # check if the module already done or not def resume(self): # get command for this module base on mode from workflow def gen_commands(self): # split commands in 3 parts then run it first, mid, post def routine(self): # # run pre method, command and post method for each module def really_routine(self, commands): # run methods in current class def sub_routine(self, commands, kind=&#39;post&#39;): # loop through pre-defined commands and run it def run(self, commands): # some task after done the routine def conclude(self):  Routine from workflow Default workflow on lib/workflow/ for each mode.</description>
    </item>
    
    <item>
      <title>Write Your Own Module</title>
      <link>https://j3ssie.github.io/Osmedeus/architecture/modules/write-your-own-module/</link>
      <pubDate>Mon, 09 Sep 2019 13:33:32 +0700</pubDate>
      
      <guid>https://j3ssie.github.io/Osmedeus/architecture/modules/write-your-own-module/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>