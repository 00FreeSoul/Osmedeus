[
{
	"uri": "https://j3ssie.github.io/Osmedeus/architecture/structure/",
	"title": "Structure",
	"tags": [],
	"description": "",
	"content": " Osmedeus Structure . ├── lib # contain lib to for Server and client │ ├── alias │ ├── client │ ├── core │ ├── mode │ ├── noti │ ├── reporter │ ├── sender # API call from client to REST API server │ └── workflow # predefine command here ├── modules # Logic for each module ├── scripts └── server # Django API Server ├── api ├── rest └── ui  Result Structure By default your output will be store in ~/.osmedeus/workspaces/. Each folder store seprated output for each routine,\nyour_target ├── fingerprint # technoly found │ └── responses ├── ipspace # All IP found ├── links │ └── raw ├── portscan │ └── screenshot │ └── raw-gowitness ├── probing # store subdomain can be reachable ├── screenshot │ ├── your_target-aquatone │ │ ├── headers │ │ ├── html │ │ └── screenshots │ └── raw-gowitness ├── stoscan └── subdomain # All subdomain found └── amass-your_target  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/installation/docker-setup/",
	"title": "Docker Setup",
	"tags": [],
	"description": "",
	"content": " Using Docker Check out docker-osmedeus by mabnavarrete for docker installation.\nTL;DR Run this command to pull container and install Osmedeus.\nInstallation docker run -d --net host --name osmedeus mablanco/osmedeus  Simple usage docker exec -it osmedeus ./osmedeus.py --client -t example.com  or access container through bash then navigate to ~/ and you\u0026rsquo;re good to go.\ndocker exec -it osmedeus /bin/bash -i  Access the UI Credentials by default will place in ~/.osmedeus/config.conf. Make sure to change the Remote api in Configuration tab to your interface that you\u0026rsquo;re running docker.\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Osmedeus allows you automated run the collection of awesome tools to reconnaissance and vulnerability scanning against the target. Features Subdomain Scan. Subdomain TakeOver Scan. Screenshot the target. Basic recon like Whois, Dig info. Web Technology detection. IP Discovery. CORS Scan. SSL Scan. Wayback Machine Discovery. URL Discovery. Headers Scan. Port Scan. Vulnerable Scan. Seperate workspaces to store all scan output and details logging. REST API. React Web UI. Support Continuous Scan. Slack notifications. Easily view report from commnad line.  Demo \n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/architecture/modules/understand-a-module/",
	"title": "Understand a Module",
	"tags": [],
	"description": "",
	"content": " Skeleton module Skeleton module define a main logic for each module. All other modules should inheritance from this.\nclass Skeleton(object): # prepare and parsing input for current module def initial(self): # check if the module already done or not def resume(self): # get command for this module base on mode from workflow def gen_commands(self): # split commands in 3 parts then run it first, mid, post def routine(self): # # run pre method, command and post method for each module def really_routine(self, commands): # run methods in current class def sub_routine(self, commands, kind='post'): # loop through pre-defined commands and run it def run(self, commands): # some task after done the routine def conclude(self):  Routine from workflow Default workflow on lib/workflow/ for each mode. Each module is each Class on that.\nFor example Class PortScan: in direct mode will place in lib/workflow/direct_list.py\nDetail about workflow. all string start with $ANYTHING will be replaced at runtime with config.\nclass PortScan: # result file to push Reports table reports = [ { \u0026quot;path\u0026quot;: \u0026quot;$WORKSPACE/portscan/final-$OUTPUT.html\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;html\u0026quot;, \u0026quot;note\u0026quot;: \u0026quot;final\u0026quot;, }, { \u0026quot;path\u0026quot;: \u0026quot;$WORKSPACE/portscan/screenshot-$OUTPUT.html\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;html\u0026quot;, \u0026quot;note\u0026quot;: \u0026quot;final\u0026quot;, }, { \u0026quot;path\u0026quot;: \u0026quot;$WORKSPACE/portscan/$OUTPUT-masscan.csv\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;bash\u0026quot;, \u0026quot;note\u0026quot;: \u0026quot;final\u0026quot;, }, { \u0026quot;path\u0026quot;: \u0026quot;$WORKSPACE/portscan/screenshot/$OUTPUT-raw-gowitness.html\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;html\u0026quot;, \u0026quot;note\u0026quot;: \u0026quot;\u0026quot;, }, ] logs = [] # real comand gonna executed # routine for module: waiting:first --\u0026gt; no waiting --\u0026gt; waiting:last # routine for each command: pre_run --\u0026gt; cmd --\u0026gt; post_run commands = { 'general': [ { \u0026quot;banner\u0026quot;: \u0026quot;Masscan 65535 ports\u0026quot;, \u0026quot;cmd\u0026quot;: \u0026quot;$ALIAS_PATH/portscan -i $TARGET -o '$WORKSPACE/portscan/$OUTPUT' -s '$WORKSPACE/portscan/summary.txt' -p '$PLUGINS_PATH'\u0026quot;, \u0026quot;output_path\u0026quot;: \u0026quot;$WORKSPACE/portscan/$OUTPUT.xml\u0026quot;, \u0026quot;std_path\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;waiting\u0026quot;: \u0026quot;first\u0026quot;, }, { \u0026quot;requirement\u0026quot;: \u0026quot;$WORKSPACE/portscan/$OUTPUT.csv\u0026quot;, # file to check before run the command \u0026quot;banner\u0026quot;: \u0026quot;CSV beautify\u0026quot;, \u0026quot;cmd\u0026quot;: \u0026quot;cat $WORKSPACE/portscan/$OUTPUT.csv | csvlook --no-inference | tee $WORKSPACE/portscan/beautify-$OUTPUT.txt\u0026quot;, \u0026quot;output_path\u0026quot;: \u0026quot;$WORKSPACE/portscan/beautify-$OUTPUT.txt\u0026quot;, \u0026quot;std_path\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;pre_run\u0026quot;: \u0026quot;update_ports\u0026quot;, \u0026quot;cleaned_output\u0026quot;: \u0026quot;$WORKSPACE/portscan/formatted-$OUTPUT.txt\u0026quot;, }, { \u0026quot;requirement\u0026quot;: \u0026quot;$WORKSPACE/portscan/$OUTPUT.csv\u0026quot;, \u0026quot;banner\u0026quot;: \u0026quot;Screenshot on ports found\u0026quot;, \u0026quot;cmd\u0026quot;: \u0026quot;$GO_PATH/gowitness file -s $WORKSPACE/portscan/scheme-$OUTPUT.txt -t 30 --log-level fatal --destination $WORKSPACE/portscan/screenshot/raw-gowitness/ --db $WORKSPACE/portscan/screenshot/gowitness.db\u0026quot;, \u0026quot;output_path\u0026quot;: \u0026quot;$WORKSPACE/portscan/screenshot/gowitness.db\u0026quot;, \u0026quot;std_path\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;post_run\u0026quot;: \u0026quot;clean_gowitness\u0026quot;, \u0026quot;pre_run\u0026quot;: \u0026quot;get_scheme\u0026quot;, \u0026quot;cleaned_output\u0026quot;: \u0026quot;$WORKSPACE/portscan/screenshot-$OUTPUT.html\u0026quot;, \u0026quot;waiting\u0026quot;: \u0026quot;last\u0026quot;, }, ], }  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/installation/remote-setup/",
	"title": "Remote Setup",
	"tags": [],
	"description": "",
	"content": " Setup REST API server on remote server Open your tmux or what ever and run the API server persistence by using this command\npython3 server/manage.py runserver  or\npython3 server/manage.py runserver 0.0.0.0:8000  if you want to bind this server on other IP and port.\nRun osmedeus client Open your tmux or what ever and run on that machine too (recommendation)\n./osmedeus -t example.com  or if you really want to run a client on your server just do\n./osmedeus -t example.com --remote http://your_remote_ip:port  Check out sercurity concern to protect your server.\n "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Video Guide\nFor Kali Linux git clone https://github.com/j3ssie/Osmedeus cd Osmedeus ./install.sh  For *nix OS Change default shell and package manager on top of the install file and you will be fine to run.\ngit clone https://github.com/j3ssie/Osmedeus cd Osmedeus ./install.sh  For MacOS Install golang officially or use homebrew and nmap, masscan. Change default shell and package manager on top of the install file and you will be fine to run.\ngit clone https://github.com/j3ssie/Osmedeus cd Osmedeus ./install.sh  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/installation/token-setup/",
	"title": "Slack Config",
	"tags": [],
	"description": "",
	"content": " Other token export GITHUB_API_KEY=xxx  Slack notification This is optional config, you don\u0026rsquo;t have to do this to get the tools done.\nYou can only provide REPORT_CHANNEL and SLACK_BOT_TOKEN to get less verbose noti.\n STATUS_CHANNEL is the place to put notifications.\nREPORT_CHANNEL is the place to put output file.\nLOG_CHANNEL is the place to put command was executed.\nSTDS_CHANNEL is the place to put all stdout.\nSLACK_BOT_TOKEN is bot API or user API token that have permission to access channel above.\nexport LOG_CHANNEL=CGXXXXXX export STATUS_CHANNEL=CGXXXXXX export REPORT_CHANNEL=CGXXXXXX export STDS_CHANNEL=CGXXXXXXX export SLACK_BOT_TOKEN=xoxb-11  Update token to db Add those line above to your ~/.bashrc or ~/.zshrc or whatever of yours and run\npython3 scripts/reload.py  Osmedeus auto pickup these environment variables and add to config file server.conf file\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": " If you have no idea what are you doing just type the command below or check out the Advanced Usage\n./osmedeus.py -t example.com  Example Commands # normal routine ./osmedeus.py -t example.com # normal routine but slow speed on subdomain module ./osmedeus.py -t example.com --slow 'all' # direct mode examples ./osmedeus.py -m portscan -i \u0026quot;1.2.3.4/24\u0026quot; ./osmedeus.py -m portscan -I list_of_targets.txt -t result_folder ./osmedeus.py -m \u0026quot;portscan,vulnscan\u0026quot; -i \u0026quot;1.2.3.4/24\u0026quot; -t result_folder ./osmedeus.py -m \u0026quot;git\u0026quot; -i 'repo:https://github.com/foo/bar' ./osmedeus.py -m \u0026quot;git\u0026quot; -i 'user:sample' # report mode ./osemdeus.py -t example.com --report list ./osemdeus.py -t example.com --report sum ./osemdeus.py -t example.com --report short ./osemdeus.py -t example.com --report full  More options Basic Usage =========== python3 osmedeus.py -t \u0026lt;your_target\u0026gt; python3 osmedeus.py -T \u0026lt;list_of_targets\u0026gt; python3 osmedeus.py -m \u0026lt;module\u0026gt; [-i \u0026lt;input\u0026gt;|-I \u0026lt;input_file\u0026gt;] [-t workspace_name] python3 osmedeus.py --report \u0026lt;mode\u0026gt; -t \u0026lt;workspace\u0026gt; [-m \u0026lt;module\u0026gt;] Advanced Usage ============== [*] List all module python3 osmedeus.py -M [*] List all report mode python3 osmedeus.py --report help [*] Running with specific module python3 osmedeus.py -t \u0026lt;result_folder\u0026gt; -m \u0026lt;module_name\u0026gt; -i \u0026lt;your_target\u0026gt; [*] Example command python3 osmedeus.py -m subdomain -t example.com python3 osmedeus.py -t example.com --slow \u0026quot;subdomain\u0026quot; python3 osmedeus.py -t sample2 -m vuln -i hosts.txt python3 osmedeus.py -t sample2 -m dirb -i /tmp/list_of_hosts.txt Remote Options ============== --remote REMOTE Remote address for API, (default: https://127.0.0.1:5000) --auth AUTH Specify authentication e.g: --auth=\u0026quot;username:password\u0026quot; See your config file for more detail (default: core/config.conf) --client just run client stuff in case you ran the flask server before More options ============== --update Update lastest from git -c CONFIG, --config CONFIG Specify config file (default: core/config.conf) -w WORKSPACE, --workspace WORKSPACE Custom workspace folder -f, --force force to run the module again if output exists -s, --slow \u0026quot;all\u0026quot; All module running as slow mode -s, --slow \u0026quot;subdomain\u0026quot; Only running slow mode in subdomain module --debug Just for debug purpose  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/usage/advanced/",
	"title": "Advanced",
	"tags": [],
	"description": "",
	"content": "   Page Description     Direct Mode Using specific Modules Directly   Report Mode View Report from command line    "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/web-ui/",
	"title": "Web UI",
	"tags": [],
	"description": "",
	"content": " Local If you\u0026rsquo;re run Osmedeus on the local machine just access http://127.0.0.1:8000, fill the credentials from your client.conf file. (by default, it\u0026rsquo;s on ~/.osmedeus/client.conf)\nYou can also create a new one via Django authentication system.\npython3 server/manage.py createsuperuser  Remote If you\u0026rsquo;re run Osmedeus server and client separately, you gonna need to change Remote URL in the login sections on the Web UI.\nCheck out this wiki for more details about running remote Osmedeus.\nCredits  React components is powered by Carbon and carbon-tutorial.\n Awesomes artworks are powered by Freepik at flaticon.com.\n  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/architecture/modules/write-your-own-module/",
	"title": "Write Your Own Module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/mics/",
	"title": "Mics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/mics/security-concern/",
	"title": "Security Concern",
	"tags": [],
	"description": "",
	"content": " Overview Because main feature of Osmedeus is allow execute command on your system so make sure you secure it. If you run default config Osmedeus only can access via your localhost.\nTurn off Debug mode in server/rest/settings.py # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True  Access remote via SSH tunnel (easiest way) You can also achieve remote access in safe method using SSH.\nssh -L 8000:localhost:8000 root@your_remote_server  make sure you\u0026rsquo;re enable GatewayPorts yes in your /etc/ssh/sshd_config on remote server.\nChange your secret key in server/rest/settings.py Use same SECRET_KEY on the github repo gonna let someone create valid token and login to your server.\n# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'your_key_here'  Running on SSL via nginx If you running Osmedeus server on remote make sure you have SSL setup otherwise you gonna lose your JWT in untrusted network and can defenily lead to a Remote Code Execution on your server.\nRead this great article for setup.\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/installation/user-management/",
	"title": "User Management",
	"tags": [],
	"description": "",
	"content": " Guide Osmedeus use Django authentication system to mange users and create token.\nYou directly create new user by using this command below.\npython3 server/manage.py createsuperuser  These user also used to login on Web UI.\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/web-ui/features/",
	"title": "Features",
	"tags": [],
	"description": "",
	"content": "View Summary report \nView Report of each module \nView Log Command as well as Stdout and Output \nBeatify bash render output \nExecute stuff directly from UI \n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/usage/advanced/report-mode/",
	"title": "Report Mode",
	"tags": [],
	"description": "",
	"content": " Report mode Usage [Report Mode] =================== sum - Summary report list - List avalible workspace short - Only print final output of each module full - Print all output of each module path - Only print final path of each module raw - Print all stdout of each module html - Export to html [Filter module] =================== subdomain, recon, assetfinding takeover, screenshot portscan, dirbrute, vulnscan gitscan, cors, ipspace, sslscan, headers [Report Usage] =================== ./osemdeus.py --report \u0026lt;mode\u0026gt; -t \u0026lt;workspace\u0026gt; [-m \u0026lt;module\u0026gt;] [Example Commands] =================== ./osemdeus.py -t example.com --report list ./osemdeus.py -t example.com --report sum ./osemdeus.py -t example.com --report path ./osemdeus.py -t example.com --report short ./osemdeus.py -t example.com -m subdomain --report short ./osemdeus.py -t example.com -m subdomain, portscan --report short ./osemdeus.py -t example.com -m subdomain, portscan --report full  Examples ./osmedeus.py --report sum -t example.com\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/usage/advanced/direct-mode/",
	"title": "Direct Mode",
	"tags": [],
	"description": "",
	"content": " Usage of Direct Mode The goal of this mode is to create lots of advanced alias for your routine.\n./osmedeus.py -m \u0026lt;modules\u0026gt; -i/-I single_input/list_of_inputs.txt [-t result_folder]  you can even use multiple modules by seperate it with ,.\n E.g: ./osmedeus.py -m \u0026quot;portscan,vuln\u0026quot; -I list_of_targets.txt -t output_folder\nModules supported direct mode List module =========== subdomain - Scanning subdomain and subdomain takerover portscan - Screenshot and Scanning service for list of domain screenshot - Screenshot list of hosts asset - Asset finding like URL, Wayback machine vuln - Scanning version of services and checking vulnerable service git - Scanning for git repo dirb - Do directory search on the target  Subdomain This module not required input options (-i/-I).\n./osmedeus.py -m subdomain -t example.com ./osmedeus.py -m subdomain -t example.com --slow 'subdomain'  Portscan and VulnScan ./osmedeus.py -m portscan -i \u0026quot;1.2.3.4/24\u0026quot; ./osmedeus.py -m portscan -I list_of_targets.txt ./osmedeus.py -m \u0026quot;portscan,vuln\u0026quot; -I list_of_targets.txt -t output_folder  AssetFinding and Screenshot ./osmedeus.py -m asset -i \u0026quot;github.com\u0026quot; -t \u0026quot;result_folder\u0026quot; ./osmedeus.py -m \u0026quot;asset,screen\u0026quot; -I list_of_targets.txt  GitScan and DirbScan ./osmedeus.py -m git -i https://github.com/do_not/try_my_repo -t sample1 ./osmedeus.py -m dirb -I /tmp/list_of_hosts.txt -t sample2  "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/mics/issues/",
	"title": "Common Issues",
	"tags": [],
	"description": "",
	"content": "Currently Osmedeus will not support Windows so any issue about this OS will not support.\n "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/mics/showcases/",
	"title": "Showcases",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": " Osmedeus basically split in two main part, Django API server and python client.\nThe architecture Normally, Osmedeus will run the subprocess python3 server/manage.py runserver to start API server and continue as a python client.\nBut if you want to run it separately for remote purpose just run\npython3 server/manage.py runserver 0.0.0.0:8000  which is bind the server on all interface on local machine and port 8000.\nHighly recommend check out Remote-Setup for security concerns.\nand run Osmedeus with \u0026ndash;client options\n./osmedeus -t example.com --client  Django API server Require Django, djangorestframework to run so make sure you installed those libraries before run\npython3 server/manage.py runserver 0.0.0.0:8000\nCheck out REST-API for all endpoints.\nPython client Require requests library to send request to the API server.\nBasically, this client will do the logic, parsing and storing the result in the workspace by running run the collection of awesome tools against the target.\nThe order of the logic is described in Osmedeus/lib/workflow/ file.\n"
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/donation/",
	"title": "Donation",
	"tags": [],
	"description": "",
	"content": " If you love my tools and would like to support my work, please check out some donation methods below.\nVia Opencollective \nVia Patreon For people who want to support from local country If you want your name appear on this page just put [Osmedeus] inside your transaction message.\n\n\nBacker from local country   "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Fully automated offensive security framework for reconnaissance and vulnerability scanning Overview    Page Description     Introduction Overview about Osmedeus   Architecture Understand the architecture of Osmedeus   Showcases Demo some showcases   Installation Guide to Installation   Usage Guide to basic usage   Advanced Guide to advanced usage   Web UI Guide to Web UI access   Common Issues Resolve common issues   Donation Supporting me    "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/index.html",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Fully automated offensive security framework for reconnaissance and vulnerability scanning Overview    Page Description     Introduction Overview about Osmedeus   Architecture Understand the architecture of Osmedeus   Showcases Demo some showcases   Installation Guide to Installation   Usage Guide to basic usage   Advanced Guide to advanced usage   Web UI Guide to Web UI access   Common Issues Resolve common issues   Donation Supporting me    "
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://j3ssie.github.io/Osmedeus/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]